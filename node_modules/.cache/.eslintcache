[{"/home/faique/Coalescense/react-memes-faique/src/index.js":"1","/home/faique/Coalescense/react-memes-faique/src/App.js":"2","/home/faique/Coalescense/react-memes-faique/src/Dashboard.js":"3","/home/faique/Coalescense/react-memes-faique/src/NewSearchBar.js":"4","/home/faique/Coalescense/react-memes-faique/src/Login.js":"5","/home/faique/Coalescense/react-memes-faique/src/MyTable.js":"6","/home/faique/Coalescense/react-memes-faique/src/GenMeme.js":"7","/home/faique/Coalescense/react-memes-faique/src/MyList.js":"8"},{"size":198,"mtime":1653127790769,"results":"9","hashOfConfig":"10"},{"size":961,"mtime":1653132157028,"results":"11","hashOfConfig":"10"},{"size":6937,"mtime":1653134156280,"results":"12","hashOfConfig":"10"},{"size":4959,"mtime":1652184305715,"results":"13","hashOfConfig":"10"},{"size":2498,"mtime":1655529105618,"results":"14","hashOfConfig":"10"},{"size":6695,"mtime":1653121684810,"results":"15","hashOfConfig":"10"},{"size":4321,"mtime":1653131838586,"results":"16","hashOfConfig":"10"},{"size":2943,"mtime":1655528487244,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"hnpqfk",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"/home/faique/Coalescense/react-memes-faique/src/index.js",[],["40","41"],"/home/faique/Coalescense/react-memes-faique/src/App.js",["42","43"],"import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Dashboard from \"./Dashboard\";\nimport Login from \"./Login\";\nimport MyList from \"./MyList\";\n\n// import axios from \"axios\";\n\n// import SearchBar from \"./SearchBar\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { islogged: false };\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <NewSearchBar /> */}\n        {/* <Dashboard /> */}\n        <Router>\n          <Route path=\"/\" exact>\n            <Login />\n          </Route>\n          <Route path=\"/Dashboard\" exact>\n            <Dashboard />\n          </Route>\n          <Route path=\"/MyList\" exact>\n            <MyList />\n          </Route>\n        </Router>\n        {/* <MakeImage /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/home/faique/Coalescense/react-memes-faique/src/Dashboard.js",["44","45","46"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./Dashboard.css\";\nimport MyTable from \"./MyTable\";\n\nimport { Link, Redirect } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Dashboard extends Component {\n  constructor(props) {\n    // if (localStorage.setItem(\"token\", this.state.loginParams.user_id)) {\n    // }\n    super(props);\n    this.state = {\n      memeResponse: [],\n      islogout: false,\n      checkedList: [],\n      modal: false,\n      searchTerm: \"\",\n      currImg: \"\",\n      memeResponse: [],\n      showList: [],\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    // this.handleShowList = this.handleShowList.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  componentDidMount() {\n    const url = \"https://api.imgflip.com/get_memes\";\n    axios.get(url).then((response) => {\n      //console.log('hi', response.data.data)\n      this.setState(\n        {\n          memeResponse: response.data.data.memes.map((a) => {\n            return {\n              ...a,\n              isChecked: false,\n            };\n          }),\n        },\n        () => {\n          this.setState({\n            showList: this.state.memeResponse,\n          });\n        }\n      );\n    });\n\n    console.log(\"heheheh\");\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    // localstorage\n    console.log(\"submitted finally\", this.state.checkedList);\n    //Map over checked index and put that item information in local storage\n    var user_check = this.state.checkedList;\n\n    localStorage.setItem(\n      localStorage.getItem(\"username\"),\n      JSON.stringify(user_check)\n    );\n    this.setState({\n      checkedList: [],\n    });\n    if (this.state.checkedList.length === 0) {\n      alert(\"No items in list\");\n    } else alert(\"List Created Successfully\");\n  }\n\n  handleChange(event) {\n    console.log(event.target.value);\n  }\n\n  signOut() {\n    this.setState({\n      islogout: true,\n    });\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"username\");\n  }\n\n  handleCheck(item, e) {\n    // index and checked status\n    // append in checklist that index for re creation\n    // Added if..else check for unchecking items\n    console.log(item);\n    let currid = this.state.memeResponse.findIndex(\n      (element) => element.id === item.id\n    );\n\n    let newArray = [...this.state.memeResponse];\n    newArray[currid] = {\n      ...newArray[currid],\n      isChecked: !newArray[currid].isChecked,\n    };\n    this.setState(\n      {\n        showList: newArray,\n        // memeResponse: newArray,\n      },\n      () => {\n        this.setState({\n          memeResponse: newArray,\n        });\n      }\n    );\n\n    this.setState({\n      checkedList: [...this.state.checkedList, item],\n    });\n    if (e.target.checked) {\n      //true append id to checklist\n\n      if (this.state.checkedList.indexOf(this.state.checkedList[item]) === -1) {\n        this.setState({\n          checkedList: [...this.state.checkedList, item],\n        });\n      }\n    } else {\n      this.setState({\n        checkedList: this.state.checkedList.filter((c_item) => {\n          return c_item !== item;\n        }),\n      });\n    }\n  }\n\n  handleShowList(e) {\n    // check for local storage empty or not\n    if (!JSON.parse(localStorage.getItem(localStorage.getItem(\"username\")))) {\n      alert(\"No list to show\");\n    } else {\n      console.log();\n      this.setState({\n        showMyList: !this.state.showMyList,\n      });\n    }\n  }\n  handleSearch(e) {\n    console.log(e.target.value);\n    this.setState({\n      searchTerm: e.target.value,\n    });\n    if (this.state.searchTerm.length !== 0) {\n      let convertToLc = e.target.value.toLowerCase();\n      let filterData = this.state.memeResponse.filter((e) => {\n        let nameToLc = e.name.toLowerCase();\n        return nameToLc.indexOf(convertToLc) !== -1;\n      });\n\n      this.setState({\n        showList: filterData,\n      });\n    } else {\n      this.setState({\n        showList: this.state.memeResponse,\n      });\n    }\n  }\n\n  render() {\n    //Checklist there, on\n    if (!localStorage.getItem(\"token\")) {\n      return <Redirect to=\"/\" />;\n    } else if (this.state.islogout) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <div className=\"dashboard grid-container col-3\" id=\"grid-container-a\">\n        <div className=\"grid-content\">\n          <ul className=\"list pos-sticky\">\n            <div className=\"list-heading\">\n              <span>Hello, {String(localStorage.getItem(\"username\"))}</span>\n              <i className=\"fa-solid fa-minus\"></i>\n            </div>\n            <li>\n              <div className=\"list-heading\">\n                <span>Dashboard</span>\n              </div>\n            </li>\n            <li>\n              Click on the Checkbox to make a list of your favoirite memes\n            </li>\n            <li>\n              <div\n                onClick={() => {\n                  this.props.history.push(\"MyList\");\n                }}\n                className=\"list-heading\"\n              >\n                <span>Show My List</span>\n              </div>\n            </li>\n            <li>You can checkout your saved Items and Generate a meme Here,</li>\n\n            <li>\n              <button onClick={this.signOut} className=\"btn-secd\">\n                Logout\n              </button>\n            </li>\n          </ul>\n        </div>\n        <div className=\"grid-content\">\n          <div className=\"input-field\">\n            <p>Search Your Favoirite Memes Here!</p>\n            <input\n              id=\"email-field\"\n              onChange={this.handleSearch}\n              type=\"text\"\n              pattern=\".*\\S.*\"\n              required\n            />\n          </div>\n          <div id=\"flex\">\n            {this.state.showList.map((item, i) => {\n              return (\n                <div className=\"card card-horizontal\">\n                  <div className=\"content-horizontal\">\n                    <img className=\"card-img\" src={item.url} alt=\"loading\" />\n\n                    <div className=\"card-text\">\n                      <p>{item.name}</p>\n                    </div>\n                  </div>\n                  <input\n                    key={i}\n                    type=\"checkbox\"\n                    checked={item.isChecked}\n                    onChange={(e) => {\n                      this.handleCheck(item, e);\n                    }}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"grid-content\">\n          <div className=\"pos-sticky\">\n            <button className=\"btn-prim\" onClick={this.handleSubmit}>\n              Submit\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Dashboard);\n","/home/faique/Coalescense/react-memes-faique/src/NewSearchBar.js",["47","48","49"],"/home/faique/Coalescense/react-memes-faique/src/Login.js",["50"],"/home/faique/Coalescense/react-memes-faique/src/MyTable.js",["51","52","53","54","55","56"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Route, Routes } from \"react-router\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\nimport { BrowserRouter, Link, Redirect, withRouter } from \"react-router-dom\";\nimport GenMeme from \"./GenMeme\";\n\nclass MyTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checkedList: [],\n      modal: false,\n      searchTerm: \"\",\n      currImg: \"\",\n      memeResponse: [],\n      showList: [],\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    // this.handleShowList = this.handleShowList.bind(this);\n  }\n\n  componentDidMount() {\n    const url = \"https://api.imgflip.com/get_memes\";\n    axios.get(url).then((response) => {\n      //console.log('hi', response.data.data)\n      this.setState(\n        {\n          memeResponse: response.data.data.memes.map((a) => {\n            return {\n              ...a,\n              isChecked: false,\n            };\n          }),\n        },\n        () => {\n          this.setState({\n            showList: this.state.memeResponse,\n          });\n        }\n      );\n    });\n\n    console.log(\"heheheh\");\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    // localstorage\n    console.log(\"submitted finally\", this.state.checkedList);\n    //Map over checked index and put that item information in local storage\n    var user_check = this.state.checkedList;\n\n    localStorage.setItem(\n      localStorage.getItem(\"username\"),\n      JSON.stringify(user_check)\n    );\n    this.setState({\n      checkedList: [],\n    });\n  }\n\n  handleCheck(item, e) {\n    // index and checked status\n    // append in checklist that index for re creation\n    // Added if..else check for unchecking items\n    console.log(item);\n    let currid = this.state.memeResponse.findIndex(\n      (element) => element.id === item.id\n    );\n\n    let newArray = [...this.state.memeResponse];\n    newArray[currid] = {\n      ...newArray[currid],\n      isChecked: !newArray[currid].isChecked,\n    };\n    this.setState(\n      {\n        showList: newArray,\n        // memeResponse: newArray,\n      },\n      () => {\n        this.setState({\n          memeResponse: newArray,\n        });\n      }\n    );\n\n    this.setState({\n      checkedList: [...this.state.checkedList, item],\n    });\n    if (e.target.checked) {\n      //true append id to checklist\n\n      if (this.state.checkedList.indexOf(this.state.checkedList[item]) === -1) {\n        this.setState({\n          checkedList: [...this.state.checkedList, item],\n        });\n      }\n    } else {\n      this.setState({\n        checkedList: this.state.checkedList.filter((c_item) => {\n          return c_item !== item;\n        }),\n      });\n    }\n  }\n\n  handleShowList(e) {\n    // check for local storage empty or not\n    if (!JSON.parse(localStorage.getItem(localStorage.getItem(\"username\")))) {\n      alert(\"No list to show\");\n    } else {\n      console.log();\n      this.setState({\n        showMyList: !this.state.showMyList,\n      });\n    }\n  }\n  handleSearch(e) {\n    console.log(e.target.value);\n    this.setState({\n      searchTerm: e.target.value,\n    });\n    if (this.state.searchTerm.length !== 0) {\n      let convertToLc = e.target.value.toLowerCase();\n      let filterData = this.state.memeResponse.filter((e) => {\n        let nameToLc = e.name.toLowerCase();\n        return nameToLc.indexOf(convertToLc) !== -1;\n      });\n\n      this.setState({\n        showList: filterData,\n      });\n    } else {\n      this.setState({\n        showList: this.state.memeResponse,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"table-box\">\n        {/* Show my list for Showing Checked list instead of all meme table using if */}\n        <div> Show your selected Meme List </div>\n        <div className=\"table-btn\">\n          <button\n            onClick={() => {\n              this.props.history.push(\"MyList\");\n            }}\n          >\n            Show My List\n          </button>\n        </div>\n        <br></br>\n        <form>\n          {/* Make my list Pushhes the mapped items in local storage */}\n          <p>\n            Use Make My List as a Submit button after Selecting your choices\n          </p>\n          <div className=\"table-btn\">\n            <button type=\"submit\" onClick={this.handleSubmit}>\n              Make My List\n            </button>\n          </div>\n          <div>\n            <input type=\"text\" onChange={this.handleSearch} />\n          </div>\n          <table className=\"response-table\">\n            <thead>\n              <tr>\n                <td>Checkbox</td>\n                <td>Name</td>\n                <td>Image</td>\n                <td>ID</td>\n              </tr>\n            </thead>\n            <tbody>\n              {/* mapping over the api response over index and show all,\n              e.target.checked - True / False  \n              i                - Index for which it is checked  */}\n              {this.state.showList.map((item, i) => (\n                <tr key={i}>\n                  <td>\n                    <input\n                      key={i}\n                      type=\"checkbox\"\n                      checked={item.isChecked}\n                      onChange={(e) => {\n                        this.handleCheck(item, e);\n                      }}\n                    ></input>\n                  </td>\n                  <td>{item.name}</td>\n                  <td>\n                    <img\n                      style={{ width: \"100px\", height: \"100px\" }}\n                      src={item.url}\n                      onClick={() => {\n                        this.setState({\n                          modal: !this.state.modal,\n                          currImg: item.url,\n                        });\n                      }}\n                    />\n                  </td>\n                  <td>{item.id}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <Modal\n            isOpen={this.state.modal}\n            toggle={() => {\n              this.setState({ modal: !this.state.modal });\n            }}\n          >\n            <ModalHeader>title</ModalHeader>\n            <ModalBody>\n              <GenMeme image={this.state.currImg} />\n            </ModalBody>\n            <ModalFooter>\n              <button\n                onClick={() => {\n                  this.setState({ modal: !this.state.modal });\n                }}\n              >\n                OK\n              </button>\n            </ModalFooter>\n          </Modal>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MyTable);\n","/home/faique/Coalescense/react-memes-faique/src/GenMeme.js",["57","58","59"],"import React, { Component } from \"react\";\n\nimport html2canvas from \"html2canvas\";\nimport { Button, ButtonGroup, DropdownMenu, Fade } from \"reactstrap\";\nimport { Dropdown, DropdownItem, DropdownToggle } from \"reactstrap\";\nimport \"./MakeImage.css\";\n\nexport default class GenMeme extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      size: 16,\n      dropdown: false,\n      color: \"white\",\n      memeResponse: [],\n      randomInt: 7,\n      topText: \"\",\n      bottomText: \"\",\n      color: \"white\",\n    };\n    this.exportAsImage = this.exportAsImage.bind(this);\n  }\n\n  downloadImage = (blob, fileName) => {\n    const fakeLink = window.document.createElement(\"a\");\n    fakeLink.style = \"display:none;\";\n    fakeLink.download = fileName;\n\n    fakeLink.href = blob;\n\n    document.body.appendChild(fakeLink);\n    fakeLink.click();\n    document.body.removeChild(fakeLink);\n\n    fakeLink.remove();\n  };\n  exportAsImage = (imageFileName) => {\n    var data = document.getElementById(\"image-box\");\n    console.log(data);\n    html2canvas(data, { useCORS: true }).then((canvas) => {\n      var image = canvas.toDataURL(\"image/jpeg\", 1.0);\n      this.downloadImage(image, imageFileName);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"page-box\">\n        <div className=\"features-box\">\n          <label>\n            Top Text\n            <input\n              onChange={(event) => {\n                this.setState({ topText: event.target.value });\n              }}\n            ></input>\n          </label>\n          <label>\n            Bottom Text\n            <input\n              onChange={(event) => {\n                this.setState({ bottomText: event.target.value });\n              }}\n            ></input>\n          </label>\n          <ButtonGroup>\n            <Button\n              className=\"btn-prim\"\n              onClick={(e) => {\n                this.setState({ color: \"Red\" });\n              }}\n            >\n              Red\n            </Button>\n            <Button\n              className=\"btn-prim\"\n              onClick={(e) => {\n                this.setState({ color: \"Blue\" });\n              }}\n            >\n              Blue\n            </Button>\n            <Button\n              onClick={(e) => {\n                this.setState({ color: \"Green\" });\n              }}\n            >\n              Green\n            </Button>\n          </ButtonGroup>\n          <Dropdown\n            isOpen={this.state.dropdown}\n            toggle={() => {\n              this.setState({ dropdown: !this.state.dropdown });\n            }}\n          >\n            <DropdownToggle caret>Select Size</DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem\n                onClick={(e) => {\n                  this.setState({ size: \"2rem\" });\n                }}\n              >\n                16\n              </DropdownItem>\n              <DropdownItem\n                onClick={(e) => {\n                  this.setState({ size: \"2.5rem\" });\n                }}\n              >\n                18\n              </DropdownItem>\n              <DropdownItem\n                onClick={(e) => {\n                  this.setState({ size: \"3rem\" });\n                }}\n              >\n                20\n              </DropdownItem>\n              <DropdownItem\n                onClick={(e) => {\n                  this.setState({ size: \"3.2rem\" });\n                }}\n              >\n                22\n              </DropdownItem>\n            </DropdownMenu>\n          </Dropdown>\n          <button\n            style={{ margin: \"10px\" }}\n            className=\"btn-prim\"\n            onClick={() => this.exportAsImage(\"meme\")}\n          >\n            Export\n          </button>\n        </div>\n        <div className=\"image-box\" id=\"image-box\">\n          <picture></picture>\n          <img width={\"500px\"} height={\"500px\"} src={this.props.image}></img>\n          <div\n            className=\"image-text-top\"\n            style={{ color: this.state.color, fontSize: this.state.size }}\n          >\n            <p>{this.state.topText}</p>\n          </div>\n          <div\n            className=\"image-text-bottom\"\n            style={{ color: this.state.color, fontSize: this.state.size }}\n          >\n            <p>{this.state.bottomText}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/home/faique/Coalescense/react-memes-faique/src/MyList.js",["60","61","62","63","64"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./MyList.css\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport GenMeme from \"./GenMeme\";\n\nclass MyList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      currImg: null,\n    };\n    this.signOut = this.signOut.bind(this);\n  }\n  signOut() {\n    this.setState({\n      islogout: true,\n    });\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"username\");\n    this.props.history.push(\"\");\n  }\n  render() {\n    return (\n      <div class=\"dashboard grid-container col-3\">\n        <div class=\"grid-content\">\n          <ul class=\"list pos-sticky\">\n            <div className=\"list-heading\">\n              <span>Hello, {String(localStorage.getItem(\"username\"))}</span>\n              <i className=\"fa-solid fa-minus\"></i>\n            </div>\n            <li>\n              <div\n                onClick={() => {\n                  this.props.history.push(\"DashBoard\");\n                }}\n                className=\"list-heading\"\n              >\n                <span>Dashboard</span>\n              </div>\n            </li>\n            <li>\n              Click on the Checkbox to make a list of your favoirite memes\n            </li>\n            <li>\n              <div\n                onClick={() => {\n                  this.props.history.push(\"MyList\");\n                }}\n                className=\"list-heading\"\n              >\n                <span>Show My List</span>\n              </div>\n            </li>\n            <li>You can checkout your saved Items and Generate a meme Here,</li>\n\n            <li>\n              <button onClick={this.signOut} className=\"btn-secd\">\n                Logout\n              </button>\n            </li>\n          </ul>\n        </div>\n        <div class=\"grid-content\">\n          <h2>Your List</h2>\n          <p>You can view your selected memes here</p>\n          <div class=\"flex\">\n            {JSON.parse(\n              localStorage.getItem(localStorage.getItem(\"username\"))\n            )?.map((item, i) => {\n              return (\n                <div\n                  onClick={() => {\n                    this.setState({\n                      currImg: item.url,\n                    });\n                  }}\n                  className=\"item card card-horizontal\"\n                >\n                  <div className=\"content-horizontal\">\n                    <img className=\"card-img\" src={item.url} alt=\"loading\" />\n\n                    <div className=\"card-text\">\n                      <p>{item.name}</p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div class=\"grid-content\">\n          <GenMeme image={this.state.currImg} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MyList);\n",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":5,"column":3,"nodeType":"71","messageId":"72","endLine":5,"endColumn":9},{"ruleId":"69","severity":1,"message":"73","line":6,"column":3,"nodeType":"71","messageId":"72","endLine":6,"endColumn":11},{"ruleId":"69","severity":1,"message":"74","line":4,"column":8,"nodeType":"71","messageId":"72","endLine":4,"endColumn":15},{"ruleId":"69","severity":1,"message":"75","line":6,"column":10,"nodeType":"71","messageId":"72","endLine":6,"endColumn":14},{"ruleId":"76","severity":1,"message":"77","line":21,"column":7,"nodeType":"78","messageId":"79","endLine":21,"endColumn":19},{"ruleId":"80","severity":1,"message":"81","line":77,"column":21,"nodeType":"82","endLine":86,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":116,"column":23,"nodeType":"82","endLine":125,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":140,"column":15,"nodeType":"82","endLine":144,"endColumn":16},{"ruleId":"69","severity":1,"message":"83","line":3,"column":10,"nodeType":"71","messageId":"72","endLine":3,"endColumn":16},{"ruleId":"69","severity":1,"message":"84","line":3,"column":10,"nodeType":"71","messageId":"72","endLine":3,"endColumn":15},{"ruleId":"69","severity":1,"message":"85","line":3,"column":17,"nodeType":"71","messageId":"72","endLine":3,"endColumn":23},{"ruleId":"69","severity":1,"message":"86","line":6,"column":10,"nodeType":"71","messageId":"72","endLine":6,"endColumn":23},{"ruleId":"69","severity":1,"message":"75","line":6,"column":25,"nodeType":"71","messageId":"72","endLine":6,"endColumn":29},{"ruleId":"69","severity":1,"message":"73","line":6,"column":31,"nodeType":"71","messageId":"72","endLine":6,"endColumn":39},{"ruleId":"80","severity":1,"message":"81","line":201,"column":21,"nodeType":"82","endLine":210,"endColumn":23},{"ruleId":"69","severity":1,"message":"87","line":4,"column":45,"nodeType":"71","messageId":"72","endLine":4,"endColumn":49},{"ruleId":"76","severity":1,"message":"88","line":20,"column":7,"nodeType":"78","messageId":"79","endLine":20,"endColumn":12},{"ruleId":"80","severity":1,"message":"81","line":140,"column":11,"nodeType":"82","endLine":140,"endColumn":72},{"ruleId":"69","severity":1,"message":"83","line":4,"column":10,"nodeType":"71","messageId":"72","endLine":4,"endColumn":16},{"ruleId":"69","severity":1,"message":"89","line":4,"column":18,"nodeType":"71","messageId":"72","endLine":4,"endColumn":23},{"ruleId":"69","severity":1,"message":"90","line":4,"column":25,"nodeType":"71","messageId":"72","endLine":4,"endColumn":36},{"ruleId":"69","severity":1,"message":"91","line":4,"column":38,"nodeType":"71","messageId":"72","endLine":4,"endColumn":47},{"ruleId":"69","severity":1,"message":"92","line":4,"column":49,"nodeType":"71","messageId":"72","endLine":4,"endColumn":60},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'MyTable' is defined but never used.","'Link' is defined but never used.","no-dupe-keys","Duplicate key 'memeResponse'.","ObjectExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Button' is defined but never used.","'Route' is defined but never used.","'Routes' is defined but never used.","'BrowserRouter' is defined but never used.","'Fade' is defined but never used.","Duplicate key 'color'.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'ModalFooter' is defined but never used.","no-global-assign","no-unsafe-negation"]